library(ThermogramBaseline)
library(dplyr)
library(tidyverse)
library(stringr)
Urine_Raw_Corrected <- readxl::read_excel("data-raw/UrineWorking.xlsx",
sheet = "Data")
library(ThermogramBaseline)
library(ThermogramBaseline)
library(usethis)
library(ThermogramBaseline)
use_data_raw()
library(dplyr)
library(tidyverse)
library(stringr)
Urine_Raw_Corrected <- readxl::read_excel("data-raw/UrineWorking.xlsx",
sheet = "Data")
Check.na.cols <- Urine_Raw_Corrected %>% slice(1) %>% is.na() %>% which()
colnames(Urine_Raw_Corrected)[Check.na.cols]
Urine_Raw_Corrected_Full <- Urine_Raw_Corrected %>% select(-all_of(Check.na.cols))
Urine.Working <- NULL
Total.Samples <- ncol(Urine_Raw_Corrected_Full)/2
for(j in 1:Total.Samples)
{
lwr <- 2*j - 1
upr <- 2*j
if(j %% 20 == 0) cat(j, ' of ', Total.Samples, 'completed. \n')
temp.col <- Urine_Raw_Corrected_Full %>% select(lwr:upr)
temp.col <- temp.col %>% mutate(SampleID = colnames(temp.col)[2])
colnames(temp.col)[1:2] <- c('Temperature', 'dCp')
Urine.Working <- Urine.Working %>% rbind(temp.col)
}
### Create variables for patient identification and tracking
### Remove all NA rows (non-aligned temperatures)
Urine.Working <- Urine.Working %>%
filter(!is.na(Temperature)) %>%
mutate(SampleNumber = factor(str_extract(SampleID, '\\d+')),
SampleIteration = factor(str_extract(SampleID, '[a-f]'))) %>%
mutate(SampleID = factor(SampleID)) %>%
relocate(SampleID)
UrineWorking <- Urine.Working
usethis::use_data(UrineWorking, overwrite = TRUE)
library(ThermogramBaseline)
library(ThermogramBaseline)
UrineWorking
?UrineWorking
library(ThermogramBaseline)
UrineWorking
?UrineWorking
library(dplyr)
library(tidyverse)
library(stringr)
Urine_Raw_Corrected <- readxl::read_excel("data-raw/UrineWorking.xlsx",
sheet = "Data")
Check.na.cols <- Urine_Raw_Corrected %>% slice(1) %>% is.na() %>% which()
colnames(Urine_Raw_Corrected)[Check.na.cols]
Urine_Raw_Corrected_Full <- Urine_Raw_Corrected %>% select(-all_of(Check.na.cols))
Urine.Working <- NULL
Total.Samples <- ncol(Urine_Raw_Corrected_Full)/2
for(j in 1:Total.Samples)
{
lwr <- 2*j - 1
upr <- 2*j
if(j %% 20 == 0) cat(j, ' of ', Total.Samples, 'completed. \n')
temp.col <- Urine_Raw_Corrected_Full %>% select(lwr:upr)
temp.col <- temp.col %>% mutate(SampleID = colnames(temp.col)[2])
colnames(temp.col)[1:2] <- c('Temperature', 'dCp')
Urine.Working <- Urine.Working %>% rbind(temp.col)
}
### Create variables for patient identification and tracking
### Remove all NA rows (non-aligned temperatures)
Urine.Working <- Urine.Working %>%
filter(!is.na(Temperature)) %>%
mutate(SampleNumber = factor(str_extract(SampleID, '\\d+')),
SampleIteration = factor(str_extract(SampleID, '[a-f]'))) %>%
mutate(SampleID = factor(SampleID)) %>%
relocate(SampleID)
UrineWorking <- Urine.Working[,1:3]
View(Urine.Working)
View(UrineWorking)
usethis::use_data(UrineWorking, overwrite = TRUE)
library(ThermogramBaseline)
UrineWorking
?UrineWorking
?Thermogram
usethis::use_vignette("my-vignette")
library(ThermogramBaseline)
head(UrineWorking)
library(ThermogramBaseline)
head(UrineWorking)
library(ThermogramBaseline)
head(UrineWorking)
SampleID <- UrineWorking %>% select("SampleID") %>% as.vector() %>% unique()
View(SampleID)
SampleID <- UrineWorking %>% select("SampleID") %>% as.list() %>% unique()
View(SampleID)
SampleID
SampleID <- UrineWorking %>% select("SampleID") %>% unique() %>% as.list()
View(SampleID)
View(SampleID)
SampleID
SampleID[1]
SampleID <- UrineWorking %>% select("SampleID") %>% unique()
SampleID <- UrineWorking %>% select("SampleID") %>% as.array() %>% unique()
SampleID <- UrineWorking %>% select("SampleID") %>% as.array() %>% unique()
SampleID <- UrineWorking %>% select("SampleID") %>% as.list.data.frame() %>% unique()
View(SampleID)
SampleID[[1]]
SampleID[1]
SampleID <- UrineWorking %>% select("SampleID") %>% unique() %>% as.list.data.frame()
View(SampleID)
View(SampleID)
SampleID
SampleID[[1]]
SampleID <- UrineWorking %>% select("SampleID") %>% unique()
SampleID[1]
SampleID[1,]
library(ThermogramBaseline)
SampleID <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
library(ThermogramBaseline)
head(UrineWorking)
SampleID <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
library(ThermogramBaseline)
library(ThermogramBaseline)
head(UrineWorking)
SampleID <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
library(ThermogramBaseline)
library(ThermogramBaseline)
head(UrineWorking)
SampleID <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
library(ThermogramBaseline)
library(ThermogramBaseline)
head(UrineWorking)
SampleID <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
SampleIDs <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
Sample.1 <- UrineWorking %>% filter(SampleID = SampleIDs[1])
SampleIDs <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
Sample.1 <- UrineWorking %>% filter(SampleID == SampleIDs[1])
endpoints <- endpoint.detection(x = Sample.1, w = 90, exclusion.lwr = 60, exclusion.upr = 80, point.selection = "innermost")
endpoints
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints[1], upr.temp = endpoints[2], plot.on = FALSE)
endpoints[1]
endpoints$lower
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints$lower, upr.temp = endpoints$upper, plot.on = FALSE)
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints$lower, upr.temp = endpoints$upper, plot.on = FALSE)
baseline
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints$lower, upr.temp = endpoints$upper, plot.on = FALSE)
head(baseline)
SampleIDs <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
Sample.1 <- UrineWorking %>% filter(SampleID == SampleIDs[1]) %>% filter(between(Temperature, 45,90))
endpoints <- endpoint.detection(x = Sample.1, w = 90, exclusion.lwr = 60, exclusion.upr = 80, point.selection = "innermost")
endpoints
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints$lower, upr.temp = endpoints$upper, plot.on = FALSE)
head(baseline)
?seq
final.sample.interpolate(x=baseline,grid.temp = seq(from = 45,to = 90,by = 0.1))
library(ThermogramBaseline)
library(ThermogramBaseline)
head(UrineWorking)
SampleIDs <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
Sample.1 <- UrineWorking %>% filter(SampleID == SampleIDs[1]) %>% filter(between(Temperature, 45,90))
endpoints <- endpoint.detection(x = Sample.1, w = 90, exclusion.lwr = 60, exclusion.upr = 80, point.selection = "innermost")
endpoints
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints$lower, upr.temp = endpoints$upper, plot.on = FALSE)
head(baseline)
final.sample.interpolate(x=baseline,grid.temp = seq(from = 45,to = 90,by = 0.1))
final <- final.sample.interpolate(x=baseline,grid.temp = seq(from = 45,to = 90,by = 0.1))
final <- final.sample.interpolate(x=baseline,grid.temp = seq(from = 45,to = 90,by = 0.1))
head(final)
auto <- auto.baseline(x=Sample.1, w=90, exclusion.lwr = 60, exclusion.upr = 80, grid.temp = seq(45,90,0.1),plot.on = TRUE)
library(ThermogramBaseline)
library(ThermogramBaseline)
head(UrineWorking)
SampleIDs <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
Sample.1 <- UrineWorking %>% filter(SampleID == SampleIDs[1]) %>% filter(between(Temperature, 45,90))
endpoints <- endpoint.detection(x = Sample.1, w = 90, exclusion.lwr = 60, exclusion.upr = 80, point.selection = "innermost")
endpoints
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints$lower, upr.temp = endpoints$upper, plot.on = FALSE)
head(baseline)
final <- final.sample.interpolate(x=baseline,grid.temp = seq(from = 45,to = 90,by = 0.1))
head(final)
auto <- auto.baseline(x=Sample.1, w=90, exclusion.lwr = 60, exclusion.upr = 80, grid.temp = seq(45,90,0.1),plot.on = TRUE)
library(ThermogramBaseline)
library(ThermogramBaseline)
head(UrineWorking)
SampleIDs <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
Sample.1 <- UrineWorking %>% filter(SampleID == SampleIDs[1]) %>% filter(between(Temperature, 45,90))
endpoints <- endpoint.detection(x = Sample.1, w = 90, exclusion.lwr = 60, exclusion.upr = 80, point.selection = "innermost")
endpoints
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints$lower, upr.temp = endpoints$upper, plot.on = FALSE)
head(baseline)
final <- final.sample.interpolate(x=baseline,grid.temp = seq(from = 45,to = 90,by = 0.1))
head(final)
auto <- auto.baseline(x=Sample.1, w=90, exclusion.lwr = 60, exclusion.upr = 80, grid.temp = seq(45,90,0.1),plot.on = TRUE)
auto <- auto.baseline(x=Sample.1, w=90, exclusion.lwr = 60, exclusion.upr = 80, grid.temp = seq(45,90,0.1),plot.on = TRUE)
head(auto)
?boxplot
library(ThermogramBaseline)
?UrineWorking
UrineWorking
library(ThermogramBaseline)
library(ThermogramBaseline)
?ThermogramBasline
?ThermogramBaseline
UrineWorking
library(ThermogramBaseline)
library(ThermogramBaseline)
kable(head(UrineWorking))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(knitr)
kable(head(UrineWorking))
?auto.baseline
library(ThermogramBaseline)
kable(endpoints)
library(ThermogramBaseline)
head(UrineWorking)
kable(head(UrineWorking))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(knitr)
kable(head(UrineWorking))
SampleIDs <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
Sample.1 <- UrineWorking %>% filter(SampleID == SampleIDs[1]) %>% filter(between(Temperature, 45,90))
endpoints <- endpoint.detection(x = Sample.1, w = 90, exclusion.lwr = 60,
exclusion.upr = 80, point.selection = "innermost")
kable(endpoints)
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints$lower,
upr.temp = endpoints$upper, plot.on = FALSE)
final <- final.sample.interpolate(x=baseline,grid.temp = seq(from = 45,to = 90,by = 0.1))
kable(auto)
final <- final.sample.interpolate(x=baseline,grid.temp = seq(from = 45,to = 90,by = 0.1))
auto <- auto.baseline(x=Sample.1, w=90, exclusion.lwr = 60, exclusion.upr = 80, grid.temp = seq(45,90,0.1),plot.on = TRUE)
kable(auto)
kable(head(auto))
auto <- auto.baseline(x=Sample.1, w=90, exclusion.lwr = 60, exclusion.upr = 80, grid.temp = seq(45,90,0.1),plot.on = TRUE)
?auto.baseline
?UrineWorking
?seq
library(ThermogramBaseline)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(knitr)
library(ThermogramBaseline)
head(UrineWorking)
kable(head(UrineWorking))
SampleIDs <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
Sample.1 <- UrineWorking %>% filter(SampleID == SampleIDs[1]) %>% filter(between(Temperature, 45,90))
endpoints <- endpoint.detection(x = Sample.1, w = 90, exclusion.lwr = 60,
exclusion.upr = 80, point.selection = "innermost")
kable(endpoints)
baseline <- baseline.subtraction.byhand(x= Sample.1, lwr.temp = endpoints$lower,
upr.temp = endpoints$upper, plot.on = FALSE)
final <- final.sample.interpolate(x=baseline,grid.temp = seq(from = 45,to = 90,by = 0.1))
auto <- auto.baseline(x=Sample.1, w=90, exclusion.lwr = 60, exclusion.upr = 80,
grid.temp = seq(45,90,0.1),plot.on = TRUE)
### Set our grid of temperatures to interpolate onto
grid.temp <- seq(from = 45,to = 90, by = 0.1)
### Create empty data frame to store results
Final.Results <- data.frame(Temperature = grid.temp)
### Store all sample IDs and how many samples we need to analyze.
All.IDs <- UrineWorking %>% pull(SampleID) %>% unique() %>% as.vector()
n.samples <- length(All.IDs)
### For loop for running all the samples through the algorithm
for(j in 1:n.samples)
{
cat('Working on Sample ', All.IDs[j], 'element ', j,' of', n.samples,' \n')
### select a sample
working.sample <- UrineWorking %>%
filter(SampleID == All.IDs[j]) %>%
select(Temperature, dCp)
### get a baseline-subtracted and interpolated final result!
auto.output <- auto.baseline(x = working.sample, grid.temp = grid.temp)
Final.Results <- Final.Results %>% cbind(out = auto.output$dCp)
cat("\014")
}
### Rename the column names to the correct
colnames(Final.Results)[-1] <- All.IDs
### The below line will save the resulting data frame as a csv file
### Only run this line once
#write.csv(x = Final.Results, file = 'Final.Results.csv')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(knitr)
library(stringr)
?data
data(UrineWorking, package = "ThermogramBaseline")
data(UrineWorking, package = "ThermogramBaseline")
head(UrineWorking)
library(ThermogramBaseline)
ThermogramBaseline::UrineWorking
